name: deploy
description: Deploy on AWS S3 Bucket

inputs:
  environment:
    description: 'The environment target'
    required: true
  path_to_gitbook_docs:
    description: 'The absolute path to GitBook content'
    required: true
  cookie_domain_script:
    description: 'The data-domain-script code needed by cookie script from One Trust'
    required: false
  allow_crawler:
    description: 'Allow crawler to index the website, by default are not allowed'
    required: false
  iam_role:
    description: 'The IAM Role to use to perform the deploy'
    required: true
  bucket:
    description: "The AWS S3 Bucket's name selected as destination"
    required: true
  cloudfront_distribution_id:
    description: 'The ID of the Cloudfront distribution to invalidate'
    required: true
  aws_region:
    description: 'The AWS region selected'
    required: false
    default: 'eu-south-1'
  cognito_user_pool_id:
    description: 'The id of the User Pool on Cognito, needed for the authentication'
    required: true
  cognito_identity_pool_id:
    description: 'The id of the Identity Pool on Cognito, needed for the authorization'
    required: true
  cognito_app_client_id:
    description: 'The App Client registered on Cognito'
    required: true
  webinar_question_lifetime_in_seconds:
    description: 'The lifetime of each question expressed in seconds'
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab

    - name: Setup Node.JS
      uses: ./.github/actions/setup-node

    - name: Configure NextJS cache
      uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
      with:
        path: ${{ github.workspace }}/apps/nextjs-website/.next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

    - name: Install dependencies
      shell: bash
      run: npm ci

    - name: Compile packages
      shell: bash
      run: npm run compile

    - name: Download GitBook docs
      shell: bash
      run: npm run download-docs -w nextjs-website

    - name: Build static website
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        NEXT_PUBLIC_ENVIRONMENT: ${{ inputs.environment }}
        PATH_TO_GITBOOK_DOCS: ${{ inputs.path_to_gitbook_docs }}
        NEXT_PUBLIC_COOKIE_DOMAIN_SCRIPT: ${{ inputs.cookie_domain_script }}
        ALLOW_CRAWLER: ${{ inputs.allow_crawler }}
        NEXT_TELEMETRY_DISABLED: "1"
        NEXT_PUBLIC_COGNITO_REGION: ${{ inputs.aws_region }}
        NEXT_PUBLIC_COGNITO_USER_POOL_WEB_CLIENT_ID: ${{ inputs.cognito_app_client_id }}
        NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ inputs.cognito_user_pool_id }}
        NEXT_PUBLIC_COGNITO_IDENTITY_POOL_ID: ${{ inputs.cognito_identity_pool_id }}
        NEXT_PUBLIC_WEBINAR_QUESTION_LIFETIME_IN_SECONDS: ${{ inputs.webinar_question_lifetime_in_seconds }}
      shell: bash
      run: npm run build -w nextjs-website

    - name: Configure AWS Credentials
      uses: ./.github/actions/configure-aws-credentials
      with:
        aws_region: ${{ inputs.aws_region }}
        role_to_assume: ${{ inputs.iam_role }}

    - name: Deploy to S3 Bucket
      shell: bash
      run: aws s3 sync ./apps/nextjs-website/out s3://${{ inputs.bucket }} --delete

    - name: Create AWS Cloudfront Invalidation
      shell: bash
      run: aws cloudfront create-invalidation --distribution-id ${{ inputs.cloudfront_distribution_id }} --paths "/*" # At the moment we invalidate all the paths
