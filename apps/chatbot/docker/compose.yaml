services:
  api:
    build:
      context: ..
      dockerfile: docker/app.local.Dockerfile
    command: "./scripts/run.local.sh"
    ports:
      - "8080:8080"
    volumes:
      - ..:/app
      - ./files/.aws:/root/.aws
      - ../../nextjs-website/out:/app/build-devp/out
    depends_on:
      redis:
        condition: service_started
      dynamodb:
        condition: service_started
      langfuse:
        condition: service_started
    env_file: ../.env.local

    networks:
      - ntw

  postgres:
    image: postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    ports:
      - "5432:5432"
    volumes:
      - database_data:/var/lib/postgresql/data
    env_file: ../.env.local
    networks:
      - ntw

  dynamodb:
    image: amazon/dynamodb-local:2.5.2
    environment:
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - AWS_DEFAULT_REGION=local
    ports:
      - "8000:8000"
    networks:
      - ntw

  redis:
    image: redis/redis-stack:7.2.0-v13
    ports:
      - "6379:6379"
      - "8001:8001"
    networks:
      - ntw

  create_index:
    build:
      context: ..
      dockerfile: docker/app.local.Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ..:/app
      - ../../nextjs-website/out:/app/build-devp/out
    command: "python src/modules/create_vector_index.py --params config/params.yaml"
    tty: true
    depends_on:
      redis:
        condition: service_started
    env_file: ../.env.local
    networks:
      - ntw

  langfuse:
    image: langfuse/langfuse:2
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3001:3000"
    env_file: ../.env.local
    networks:
      - ntw

volumes:
  database_data:
    driver: local

networks:
  ntw:
